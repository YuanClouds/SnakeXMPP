package cn.snake.dbkit.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.snake.dbkit.bean.ContactModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_MODEL".
*/
public class ContactModelDao extends AbstractDao<ContactModel, Long> {

    public static final String TABLENAME = "CONTACT_MODEL";

    /**
     * Properties of entity ContactModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Jid = new Property(2, String.class, "jid", false, "JID");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property LastMessage = new Property(4, String.class, "lastMessage", false, "LAST_MESSAGE");
        public final static Property LastTime = new Property(5, long.class, "lastTime", false, "LAST_TIME");
        public final static Property HeadPicUrl = new Property(6, String.class, "headPicUrl", false, "HEAD_PIC_URL");
        public final static Property Mobile = new Property(7, String.class, "mobile", false, "MOBILE");
        public final static Property NewMessageCounts = new Property(8, int.class, "newMessageCounts", false, "NEW_MESSAGE_COUNTS");
    }


    public ContactModelDao(DaoConfig config) {
        super(config);
    }
    
    public ContactModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"JID\" TEXT," + // 2: jid
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"LAST_MESSAGE\" TEXT," + // 4: lastMessage
                "\"LAST_TIME\" INTEGER NOT NULL ," + // 5: lastTime
                "\"HEAD_PIC_URL\" TEXT," + // 6: headPicUrl
                "\"MOBILE\" TEXT," + // 7: mobile
                "\"NEW_MESSAGE_COUNTS\" INTEGER NOT NULL );"); // 8: newMessageCounts
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(3, jid);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(5, lastMessage);
        }
        stmt.bindLong(6, entity.getLastTime());
 
        String headPicUrl = entity.getHeadPicUrl();
        if (headPicUrl != null) {
            stmt.bindString(7, headPicUrl);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
        stmt.bindLong(9, entity.getNewMessageCounts());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(3, jid);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(5, lastMessage);
        }
        stmt.bindLong(6, entity.getLastTime());
 
        String headPicUrl = entity.getHeadPicUrl();
        if (headPicUrl != null) {
            stmt.bindString(7, headPicUrl);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
        stmt.bindLong(9, entity.getNewMessageCounts());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContactModel readEntity(Cursor cursor, int offset) {
        ContactModel entity = new ContactModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // jid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lastMessage
            cursor.getLong(offset + 5), // lastTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // headPicUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobile
            cursor.getInt(offset + 8) // newMessageCounts
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactModel entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastMessage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastTime(cursor.getLong(offset + 5));
        entity.setHeadPicUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNewMessageCounts(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContactModel entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContactModel entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactModel entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
