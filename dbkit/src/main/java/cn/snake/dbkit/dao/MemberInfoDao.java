package cn.snake.dbkit.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.snake.dbkit.bean.MemberInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER_INFO".
*/
public class MemberInfoDao extends AbstractDao<MemberInfo, Long> {

    public static final String TABLENAME = "MEMBER_INFO";

    /**
     * Properties of entity MemberInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property GroupId = new Property(2, int.class, "groupId", false, "GROUP_ID");
        public final static Property JoinTime = new Property(3, String.class, "joinTime", false, "JOIN_TIME");
        public final static Property Jid = new Property(4, String.class, "jid", false, "JID");
        public final static Property UserName = new Property(5, String.class, "userName", false, "USER_NAME");
        public final static Property HeadPicUrl = new Property(6, String.class, "headPicUrl", false, "HEAD_PIC_URL");
        public final static Property IsGroupMaster = new Property(7, int.class, "isGroupMaster", false, "IS_GROUP_MASTER");
        public final static Property OtherInfo = new Property(8, String.class, "otherInfo", false, "OTHER_INFO");
    }


    public MemberInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MemberInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 2: groupId
                "\"JOIN_TIME\" TEXT," + // 3: joinTime
                "\"JID\" TEXT," + // 4: jid
                "\"USER_NAME\" TEXT," + // 5: userName
                "\"HEAD_PIC_URL\" TEXT," + // 6: headPicUrl
                "\"IS_GROUP_MASTER\" INTEGER NOT NULL ," + // 7: isGroupMaster
                "\"OTHER_INFO\" TEXT);"); // 8: otherInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemberInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getGroupId());
 
        String joinTime = entity.getJoinTime();
        if (joinTime != null) {
            stmt.bindString(4, joinTime);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(5, jid);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String headPicUrl = entity.getHeadPicUrl();
        if (headPicUrl != null) {
            stmt.bindString(7, headPicUrl);
        }
        stmt.bindLong(8, entity.getIsGroupMaster());
 
        String otherInfo = entity.getOtherInfo();
        if (otherInfo != null) {
            stmt.bindString(9, otherInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemberInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getGroupId());
 
        String joinTime = entity.getJoinTime();
        if (joinTime != null) {
            stmt.bindString(4, joinTime);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(5, jid);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String headPicUrl = entity.getHeadPicUrl();
        if (headPicUrl != null) {
            stmt.bindString(7, headPicUrl);
        }
        stmt.bindLong(8, entity.getIsGroupMaster());
 
        String otherInfo = entity.getOtherInfo();
        if (otherInfo != null) {
            stmt.bindString(9, otherInfo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MemberInfo readEntity(Cursor cursor, int offset) {
        MemberInfo entity = new MemberInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.getInt(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // joinTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // jid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // headPicUrl
            cursor.getInt(offset + 7), // isGroupMaster
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // otherInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemberInfo entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupId(cursor.getInt(offset + 2));
        entity.setJoinTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeadPicUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsGroupMaster(cursor.getInt(offset + 7));
        entity.setOtherInfo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MemberInfo entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MemberInfo entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MemberInfo entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
