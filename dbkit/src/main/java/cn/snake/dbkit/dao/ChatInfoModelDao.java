package cn.snake.dbkit.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.snake.dbkit.bean.ChatInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_INFO_MODEL".
*/
public class ChatInfoModelDao extends AbstractDao<ChatInfoModel, Void> {

    public static final String TABLENAME = "CHAT_INFO_MODEL";

    /**
     * Properties of entity ChatInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Jid = new Property(0, String.class, "jid", false, "JID");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property To = new Property(2, String.class, "to", false, "TO");
        public final static Property From = new Property(3, String.class, "from", false, "FROM");
        public final static Property Body = new Property(4, String.class, "body", false, "BODY");
        public final static Property Thread = new Property(5, String.class, "thread", false, "THREAD");
        public final static Property State = new Property(6, String.class, "state", false, "STATE");
    }


    public ChatInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public ChatInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_INFO_MODEL\" (" + //
                "\"JID\" TEXT," + // 0: jid
                "\"TYPE\" TEXT," + // 1: type
                "\"TO\" TEXT," + // 2: to
                "\"FROM\" TEXT," + // 3: from
                "\"BODY\" TEXT," + // 4: body
                "\"THREAD\" TEXT," + // 5: thread
                "\"STATE\" TEXT);"); // 6: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_INFO_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatInfoModel entity) {
        stmt.clearBindings();
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(1, jid);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(3, to);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(4, from);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(5, body);
        }
 
        String thread = entity.getThread();
        if (thread != null) {
            stmt.bindString(6, thread);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(7, state);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatInfoModel entity) {
        stmt.clearBindings();
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(1, jid);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(3, to);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(4, from);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(5, body);
        }
 
        String thread = entity.getThread();
        if (thread != null) {
            stmt.bindString(6, thread);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(7, state);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ChatInfoModel readEntity(Cursor cursor, int offset) {
        ChatInfoModel entity = new ChatInfoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // jid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // to
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // from
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // body
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thread
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatInfoModel entity, int offset) {
        entity.setJid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFrom(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBody(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThread(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ChatInfoModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ChatInfoModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(ChatInfoModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
